// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	context "context"

	v1 "github.com/openshift/api/project/v1"
	projectv1 "github.com/openshift/client-go/project/applyconfigurations/project/v1"
	typedprojectv1 "github.com/openshift/client-go/project/clientset/versioned/typed/project/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	gentype "k8s.io/client-go/gentype"
	testing "k8s.io/client-go/testing"
)

// fakeProjectRequests implements ProjectRequestInterface
type fakeProjectRequests struct {
	*gentype.FakeClientWithApply[*v1.ProjectRequest, *projectv1.ProjectRequestApplyConfiguration]
	Fake *FakeProjectV1
}

func newFakeProjectRequests(fake *FakeProjectV1) typedprojectv1.ProjectRequestInterface {
	return &fakeProjectRequests{
		gentype.NewFakeClientWithApply[*v1.ProjectRequest, *projectv1.ProjectRequestApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("projectrequests"),
			v1.SchemeGroupVersion.WithKind("ProjectRequest"),
			func() *v1.ProjectRequest { return &v1.ProjectRequest{} },
		),
		fake,
	}
}

// Create takes the representation of a projectRequest and creates it.  Returns the server's representation of the project, and an error, if there is any.
func (c *fakeProjectRequests) Create(ctx context.Context, projectRequest *v1.ProjectRequest, opts metav1.CreateOptions) (result *v1.Project, err error) {
	emptyResult := &v1.Project{}
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateActionWithOptions(c.Resource(), projectRequest, opts), emptyResult)
	if obj == nil {
		return emptyResult, err
	}
	return obj.(*v1.Project), err
}
